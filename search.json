[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 SAILR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Connection.html","id":"the-sailrconnection-class","dir":"Articles","previous_headings":"","what":"The SAILR::Connection class","title":"Connection","text":"R6 class intended used database interface (DBI), allowing write code interacts SAIL Databank database. IMPORTANT: Please note, can see differences SAILR SAILDBUtils Comparison SAILR SAILDBUtils section","code":""},{"path":[]},{"path":"/articles/Connection.html","id":"how-to-connect-via-your-gateway-account","dir":"Articles","previous_headings":"The SAILR::Connection class > Getting Started","what":"How to connect via your Gateway account","title":"Connection","text":"Note: Don’t forget load package enviroment entering following: library(SAILR) Since users SAIL databank connect using account credentials gateway account, can simply initialise new SAILR::Connection instance. method utilise SAILR::Profile class automatically collect machine’s username. class helps keep password safe storing local machine encrypted state helps ensure don’t accidentally leak within source code /.RData files. also help save little time won’t reenter password next attempt choose save secret. Calling method first time open window prompting enter password; complete, connected database. successful, asked want save password secret device. However, note prompted renter ever change account’s password! use method, simply enter following: Please note single time R environment assuming store global variable, e.g. outside function / local scope; examples throughout document include line connection made - can safely ignore line already connected database!","code":"# Automatically connect to the `PR_SAIL` database using your current username db = Connection$new()  # Check if we're connected if (db$connected) {   print('I am connected!') }"},{"path":"/articles/Connection.html","id":"how-to-connect-using-another-methoddatabaseusername","dir":"Articles","previous_headings":"The SAILR::Connection class > Getting Started","what":"How to connect using another method/database/username","title":"Connection","text":"Note: don’t supply password following example don’t want , prompted enter via window leave unspecified - actually preferred option accidentally leak password! use account ’s different gateway username, need connect database PR_SAIL otherwise can modify connection behaviour specifying following arguments. ’d rather use SAILR::Profile class store /manage secrets, can amend use.profile option:","code":"db = Connection$new(   # The database username   username = 'some_username',   # The password associated with the username   #   #  NOTE:   #    Adding your password directly into the code is highly discouraged,   #    consider using the example above if you can, or just don't supply   #    your password and SAILR:Connection will ask you for it!!   #   password = 'some_password',   # The database name   database = 'PR_NHSD' # ...or some other database! ) db = Connection$new(   # The database username   username    = 'some_username',   # The password associated with the username   password    = 'some_password',   # The database name   database    = 'PR_SAIL',   # Turn off the Profile secret manager   use.profile = FALSE )"},{"path":"/articles/Connection.html","id":"how-to-remove-your-saved-secretspasswords","dir":"Articles","previous_headings":"The SAILR::Connection class > Getting Started","what":"How to remove your saved secrets/passwords","title":"Connection","text":"See SAILR::Profile information interact manage secrets; intention interact Profile class SAILR::Connection instance, can call Connection$get.profile() method:","code":"db = Connection$new() # if you haven't already connected  # Get the profile instance my.profile = db$get.profile()  # Delete the secrets associated with a username my.profile$remove.secrets('username_to_remove')  # Or, if you want to delete the secrets related to the current connection... my.profile$remove.secrets(db$username)"},{"path":"/articles/Connection.html","id":"options-to-modify-behaviour","dir":"Articles","previous_headings":"The SAILR::Connection class > Getting Started","what":"Options to modify behaviour","title":"Connection","text":"several options available can modified global level don’t continuously pass method repeatedly, include: SAILR.USE.SECRETS: Whether use SAILR::Profile manager store & load secrets, .e. password storage manager username used authenticate database connections SAILR.DROP.UDF: Specifies whether SAILR::Connection$drop() method use SAIL user-defined function instead using anonymous procedure SAILR.CHUNK.SIZE: Describes number rows sent statement saving data.frame database; can reduced increased depending wide table structure SAILR.TIMEZONE: Specifies timezone used DATE, TIMESTAMP DATE columns SAILR.QUIET: Determines whether SAILR::Connection methods send condition messages operations started / finished; can used measure performance /debug statement(s) SAILR..WARN: Determines whether warnings logged console SAILR.THROW.ERRORS: Specifies whether current thread halted error encountered; expected wrap SAILR::Connection calls error handler deactivate option","code":""},{"path":[]},{"path":"/articles/Connection.html","id":"submitting-statements","dir":"Articles","previous_headings":"The SAILR::Connection class > Interacting with the database","what":"Submitting statements","title":"Connection","text":"Several methods available submit statement database: generic method submit type statement database, whether query statement executed, similar SAILDBUtils::runSQL method , return value $run method can vary depending query ran, see example details: method solely submit queries, e.g. SELECT statement, database; method preferred executing transaction - talked Executing transactions section method can used way throw error return value isn’t data frame, e.g.: method solely submit & execute statements perform data manipulation (e.g., UPDATE, INSERT, DELETE, DROP etc); , preferred method executing transactions Despite , method can used way described previous example, e.g.:","code":"db = Connection$new() # if you haven't already connected  # Sends a query to the database which will return a `data.frame()` object # like below... # #  |   | IBMREQD | #  |---|---------| #  | 1 | Y       | #  db$run(\"   SELECT *     FROM SYSIBM.SYSDUMMY1; \")  # Submits a statement to the database and executes it, will return a logical # value (TRUE/FALSE) and may include an attribute that describes how many rows were affected # success = db$run(\"   DECLARE GLOBAL TEMPORARY TABLE SESSION.SOME_TABLE (     SOME_BIG_NUMBER       BIGINT,     sOME_SMALLER_NUMBER   INTEGER,     SOME_TEXT             VARCHAR(10)   )     WITH REPLACE; \")  print(attr(success, 'rows.affected')) # will print 0 db = Connection$new() # if you haven't already connected  # Sends a query to the database which will return a `data.frame()` object # like below... # #  |   | IBMREQD | #  |---|---------| #  | 1 | Y       | #  db$query(\"   SELECT *     FROM SYSIBM.SYSDUMMY1; \")  # Attempting to submit a non-query statement that doesn't return a # `data.frame()` object will throw an error: db$query(\"INSERT INTO SYSIBM.SYSDUMMY1 (IBMREQD) VALUES ('N'), ('Y');\") # Oops, error! db = Connection$new() # if you haven't already connected  # Submit and syncrhonously execute some data manipulation statement... # #  NOTE: #   - Unlike the previous example, this will return an integer value #     instead of a logical (TRUE/FALSE); # #   - Instead, this method will directly return the number of rows #     that have been affected' # #   - In the case of the statement executed below, this will be an integer #     value of `0` # db$execute(\"   DECLARE GLOBAL TEMPORARY TABLE SESSION.SOME_TABLE (     SOME_BIG_NUMBER       BIGINT,     sOME_SMALLER_NUMBER   INTEGER,     SOME_TEXT             VARCHAR(10)   )     WITH REPLACE; \")  # As in the case of the `db$query` method, attempting to submit # a query to the `db$execute` method will throw an error: # db$execute(\"SELECT * FROM SYSIBM.SYSDUMMY1;\") # Oops, error!"},{"path":"/articles/Connection.html","id":"executing-transactions","dir":"Articles","previous_headings":"The SAILR::Connection class > Interacting with the database","what":"Executing transactions","title":"Connection","text":"need run sequential, synchronous SQL statements /queries can create run transaction using Connection$transaction method. expression specified calling method automatically committed end statement unless either () error occurs (b) manually call Connection$exit.transaction method. Rollbacks automatically performed transaction exited, either error calling aforementioned $exit.transaction method. Please see following example create & execute transaction:","code":"db = Connection$new() # if you haven't already connected  success = db$transaction({   # Create some session table   db$execute(\"     DECLARE GLOBAL TEMPORARY TABLE SESSION.SOME_TABLE (       SOME_BIG_NUMBER       BIGINT,       sOME_SMALLER_NUMBER   INTEGER,       SOME_TEXT             VARCHAR(10)     )       WITH REPLACE;   \")    # Insert some data   db$execute(\"     INSERT INTO SESSION.SOME_TABLE (SOME_BIG_NUMBER, SOME_SMALLER_NUMBER, SOME_TEXT)     VALUES       (1, 2, 'HELLO'),       (3, 4, 'WORLD!');   \")    # Get our current table   my.values = db$query(\"     SELECT *       FROM SESSION.SOME_TABLE;   \")    # Some example condition to determine whether we should rollback our   # transaction   if (nrow(my.values) < 1) {     db$exit.transaction()   } })  # Unless an error occurred, or if the `db$exit.transaction()` call happened (which it shouldn't have!) # then we can continue on with our other tasks, e.g. ... # if (success) {   # Our `my.values` variable from earlier is accessible outside the `db$transaction` statement   # as it shares the same environment   #   # This will print:   #   #  |   | SOME_BIG_NUMBER | SOME_SMALLER_NUMBER | SOME_TEXT |   #  |---|-----------------|---------------------|-----------|   #  | 1 | 1               | 2                   | 'HELLO'   |   #  | 2 | 3               | 4                   | 'WORLD!'  |   #   print(my.values) }"},{"path":[]},{"path":"/articles/Connection.html","id":"sql-tables-from-r-data-frame-objects","dir":"Articles","previous_headings":"The SAILR::Connection class > Creating tables in SQL from R","what":"SQL tables from R data.frame() objects","title":"Connection","text":"can create table data.frame() object using Connection$save() method. method attempts save data.frame object SQL table; either creating new table appending data existing table, dependent arguments specify. Please note operation transactional rolled back fails point. example can seen :","code":"db = Connection$new() # if you haven't already connected  # Some data that we want to create an SQL from: some.data = data.frame(   some_number = c(1, 2),   some_text   = c('hello', 'world!'),   some_date   = c(as.Date('2024-09-07'), as.Date('2024-09-07')),   some_time   = c(as.ITime('10:00'), as.ITime('10:00')),   some_double = c(1.1, 1.2),   some_bool   = c(TRUE, FALSE) )  # Save our data to a new table: db$save(   # The name of the table (in our example we're using a temporary `SESSION`   # table)   'SESSION.SOME_EXAMPLE_TABLE',   # The data   some.data, )  # Let's pretend we realised we made a mistake and want to overwrite our table # with new data: db$save(   # The name of the table (in our example we're using a temporary `SESSION`   # table)   'SESSION.SOME_EXAMPLE_TABLE',   # The data   some.data,   # Let our `$save()` method call overwrite the old table   can.overwrite = TRUE )  # Maybe we want to append the data to the table instead of creating a new one: db$save(   # The name of the table (in our example we're using a temporary `SESSION`   # table)   'SESSION.SOME_EXAMPLE_TABLE',   # The data (let's pretend this is a different set of data!)   some.data,   # Let our `$save()` method call overwrite the old table   can.append = TRUE )  # Additional options that you might want to use: db$save(   # The name of the table (in our example we're using a temporary `SESSION`   # table)   table.reference    = 'SESSION.SOME_EXAMPLE_TABLE',   # The data   table.data         = some.data,   # Whether to append to the table if it already exists; default is `FALSE`   can.append         = FALSE,   # Whether to truncate and overwrite the table if it already exists; default   # is `FALSE   can.overwrite      = TRUE,   # Whether to strip all non-DB2 compliant characters from a column's name; the    # default is `TRUE`   sanitise.columns   = TRUE,   # Whether to insert logical types as a number of either `1` or `0`, or to   # save it as a `TRUE` / `FALSE` character - the default to this is `TRUE`   logical.as.integer = TRUE,   # Whether to attempt to parse character columns as one of the following   # `[ DATE | TIME | TIMESTAMP ]`; the default here is `FALSE`   parse.datetimes    = TRUE,   # Whether we should alters tables to stop logging initially to speed up   # insert(s); the default here is `TRUE`   reduce.db.logging  = TRUE,   # Determines the size of insert statement chunks; defaults to `1000`   #   #  NOTE:   #   - We chunk the insert statements to speed things up, you might want to   #     play around with this number if you have a lot of columns   #   chunk.size         = 1000 )"},{"path":"/articles/Connection.html","id":"safely-creating-sql-tables-from-select-statements","dir":"Articles","previous_headings":"The SAILR::Connection class > Creating tables in SQL from R","what":"Safely creating SQL tables from SELECT statements","title":"Connection","text":"safe wrapper create new table SELECT statement uses transactions; offers extended behaviour make operation slightly easier:","code":"db = Connection$new() # if you haven't already connected  # Create a table from select statement / another table: db$create.from(   # The new table name   'SESSION.OTHER_EXAMPLE_TABLE',   # The select statement   #   #  NOTE:   #    Don't include an SQL delimiter at the end of your   #    statement here, i.e. don't add a semi-colon (`;`)!   #   \"     SELECT         'Hello, world!' as SOME_TEXT       FROM SYSIBM.SYSDUMMY1   \",   # Whether to append this SQL statement to the table   # if already exists; defaults to `FALSE`   can.append = FALSE,   # Whether to drop any existing `SESSION.OTHER_EXAMPLE_TABLE`   # if it already exists; defaults to `FALSE`   can.overwrite = FALSE )"},{"path":"/articles/Connection.html","id":"remapping-sql-tables-with-names-specified-in-r","dir":"Articles","previous_headings":"The SAILR::Connection class > Creating tables in SQL from R","what":"Remapping SQL tables with names specified in R","title":"Connection","text":"Another helpful, safe wrapper help create new table another table whilst mapping column names different subset column names specified R. example can seen :","code":"db = Connection$new() # if you haven't already connected  db$map.from(   # Our old table to copy the data from - we're using the table   # from the example above here!   input.reference   = 'SESSION.OTHER_EXAMPLE_TABLE',   # Our new table that we want to map into   output.reference  = 'SESSION.SHINY_NEW_TABLE',   # A list of column names that we want to map to and from;   # in which the key (left-hand side) is the old column name,   # and the value (right-hand side) is the new column name   output.map        = list(     SOME_TEXT = 'NEW_COLUMN_NAME'   ),   # Whether to overwrite the 'SESSION.SHINY_NEW_TABLE'   # if it already exists; defaults to `FALSE`   can.overwrite     = TRUE,   # Whether to reduce db logging by turning off the initial   # logs; defaults to `TRUE`   reduce.db.logging = TRUE )"},{"path":[]},{"path":"/articles/Connection.html","id":"granting-others-access-to-a-table-or-a-schema","dir":"Articles","previous_headings":"The SAILR::Connection class > Helpful methods","what":"Granting others access to a table or a schema","title":"Connection","text":"working another colleague team member often grant access tables created, SAILR::Connection class method can help safely perform operation one tables one users:","code":"db = Connection$new() # if you haven't already connected  db$grant(   # The schema in which the table(s) exist   schema = 'SAILW9999V',   # The tables you want to grant access to   #   #  NOTE:   #    - If this is left as `NA` (undefined) then the   #      users that are selected will be granted access   #      to all of the tables in the schema!   #    - Note that the `tables` argument Can be one or more tables, or left   #      blank to grant access to all tables!   #   tables = c('SOME_EXAMPLE_TABLE', 'OTHER_EXAMPLE_TABLE', 'SHINY_NEW_TABLE'),   # The users who should be granted access to the tables above   users = c('some.colleague', 'other.colleague') # Can be one or more users! )"},{"path":"/articles/Connection.html","id":"checking-if-a-table-name-is-a-temporary-table","dir":"Articles","previous_headings":"The SAILR::Connection class > Helpful methods","what":"Checking if a table name is a temporary table","title":"Connection","text":"following method can used determine whether table name refers temporary table:","code":"db = Connection$new() # if you haven't already connected  if (db$is.temporary('SESSION.SOME_OTHER_TABLE')) {   print('it is temporary!') }"},{"path":"/articles/Connection.html","id":"checking-if-an-sql-table-exists","dir":"Articles","previous_headings":"The SAILR::Connection class > Helpful methods","what":"Checking if an SQL table exists","title":"Connection","text":"following can used determine whether table exists without throwing error:","code":"db = Connection$new() # if you haven't already connected  db$exists('SESSION.OTHER_EXAMPLE_TABLE')"},{"path":"/articles/Connection.html","id":"dropping-an-sql-table","dir":"Articles","previous_headings":"The SAILR::Connection class > Helpful methods","what":"Dropping an SQL table","title":"Connection","text":"following method can used safely drop SQL table without throwing error:","code":"db = Connection$new() # if you haven't already connected  db$drop('SESSION.SOME_EXAMPLE_TABLE')"},{"path":"/articles/Connection.html","id":"truncating-an-sql-table","dir":"Articles","previous_headings":"The SAILR::Connection class > Helpful methods","what":"Truncating an SQL table","title":"Connection","text":"following method can used truncate SQL table:","code":"db = Connection$new() # if you haven't already connected  db$truncate('SESSION.OTHER_EXAMPLE_TABLE')"},{"path":[]},{"path":"/articles/Connection.html","id":"static-methods","dir":"Articles","previous_headings":"The SAILR::Connection class > Misc. methods","what":"Static methods","title":"Connection","text":"following static methods may used type validation & validating SAILR::Connection instances:","code":"db = Connection$new() # if you haven't already connected  # Check if some object is a `SAILR::Connection` # #  NOTE: #   - Static methods CANNOT be accessed via the `db` instance; #     they can only be accessed via the top-level class like below: # if (Connection$is(db)) {   print('It is a connection!') }  try({   db$is(db) # this will fail! })  # Check if a connection is valid # #  NOTE: #   - As above, this can only be accessed by the top-level class # if (Connection$is.valid(db)) {   print('The connection is valid!') }"},{"path":"/articles/Connection.html","id":"member-fields","dir":"Articles","previous_headings":"The SAILR::Connection class > Misc. methods","what":"Member fields","title":"Connection","text":"need access specifics SAILR::Connection instance, please see following class member fields:","code":"db = Connection$new() # if you haven't already connected  # Determine if the database connection is valid & active db$connected # -> TRUE / FALSE  # Get the current connection string db$connection.string # -> e.g. `UID=username;DSN=PR_SAIL`  # Get the connected username db$username # -> e.g. 'my_username'  # Get the connected database name db$database # -> e.g. 'PR_SAIL'"},{"path":"/articles/Connection.html","id":"additional-methods","dir":"Articles","previous_headings":"The SAILR::Connection class > Misc. methods","what":"Additional methods","title":"Connection","text":"following methods available want interface ODBC handle SAILR::Profile class contained instance: $get.hnd - retrieves ODBC handle: $get.profile - retrieves SAILR::Profile class:","code":"db = Connection$new() # if you haven't already connected  db$get.hnd() db = Connection$new() # if you haven't already connected  db$get.profile()"},{"path":"/articles/Connection.html","id":"comparison-of-sailr-and-saildbutils","dir":"Articles","previous_headings":"The SAILR::Connection class","what":"Comparison of SAILR and SAILDBUtils","title":"Connection","text":"SAILR::Connection class intends act unofficial, mostly drop-replacement SAILDBUtils package differences noted. highlighted following sections, /can seen many examples described .","code":""},{"path":"/articles/Connection.html","id":"additional-utilities-tooling","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils","what":"Additional utilities & tooling","title":"Connection","text":"Please see ./DatasetContainer.Rmd ./Profile.Rmd, included within SAILR namespace intended used alongside SAILR::Connection.","code":""},{"path":[]},{"path":"/articles/Connection.html","id":"odbc-backend","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils > Dependency changes","what":"ODBC backend","title":"Connection","text":"Unlike SAILDBUtils package, package leverages ODBC DBI packages ODBC backend, dependencies authored maintained Posit PBC, company created RStudio. aforementioned packages created intention alternative RODBC, ODBC package relied upon SAILDBUtils, typically much faster RODBC across several benchmarks. One significant benefit change likely maintained much longer RODBC due support RStudio developers & R development community. Although SAILR::Connection SAILDBUtils may share familiar interfaces, aside new & additional features, noted significant differences. Unfortunately, differences may require make changes codebase.","code":""},{"path":"/articles/Connection.html","id":"string-interpolation","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils > Dependency changes","what":"String interpolation","title":"Connection","text":"String interpolation process evaluating string containing placeholders (often variables held environment) yielding result placeholders replace/bound corresponding values, e.g. Value: ${5 + 5} becomes Value: 10. SAILDBUtils package relies upon GetOptLong perform string interpolation SAILR uses stringr package; ’s requirement use stringr instead GetOptLong mean call library function GetOptLong attach environment. ’s comparison interpolation SAILDBUtils v.s. SAILR: contrast , ’s example using SAILR instead SAILDBUtils: note, however, can still use GetOptLong package manually attaching , e.g. …","code":"# First, let's load the package library(SAILDBUtils)  # Now let's define some values some.value = 'Hello, world!' some.table.name = 'SYSIBM.SYSDUMMY1'  # Let's connect to the database db = SAILDBUtils::SAILConnect()  # Let's run an SQL query using the interpolated statement # #  NOTE: #    - The `qq` function used below to interpolate the string is defined by the #      `GetOptLong` package, and can be called from its namespace using #      the following: `GetOptLong::qq(\"Number: @{5}\")` # #    - After interpolation the following query becomes: #    ```sql #      SELECT #          'Hello, world!' AS SOME_TEXT #        FROM SYSIBM.SYSDUMMY1; #    ``` # SAILDBUtils::runSQL(db, qq(\"   SELECT      '@{some.value}' AS SOME_TEXT     FROM @{some.table.name}; \")) # First, let's load the package library(SAILR)  # Now let's define some values some.value = 'Hello, world!' some.table.name = 'SYSIBM.SYSDUMMY1'  # Let's connect to the database db = Connection$new()  # Let's run an SQL query using the interpolated statement # #  NOTE: #   - The `str_interp` function used below is accessible from the `stringr` #     namespace, _e.g._ `stringr::str_interp(\"Number: ${5}\")` # #   - It's IMPORTANT to note that the `stringr` package uses the `${_VALUE_}` #     format to define a variable inplace of `GetOptLong`'s method of using the #     `@` symbol (_e.g._ `@{_value_}`) # db$run(str_interp(\"   SELECT      '${some.value}' AS SOME_TEXT     FROM ${some.table.name}; \")) library(GetOptLong)  # In this example we're using the SAILR::Connection and variables defined above! db$run(qq(\"   SELECT      '@{some.value}' AS SOME_TEXT     FROM @{some.table.name}; \"))"},{"path":"/articles/Connection.html","id":"the-connection-object","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils","what":"The Connection object","title":"Connection","text":"SAILDBUtils package developed use within mostly functional programming context, , required pass around Connection object like : likely first encounter significant difference; , instead passing around Connection object/handle, required instantiate SAILR::Connection class environment call methods directly indexing SAILR::Connection class, e.g. …","code":"# Load the SAILDBUtils package library(SAILDBUtils)  # Connect to the database db = SAILDBUtils::SAILConnect( # or SAILConnect()   username = Sys.getenv('USERNAME'),   password = '########' )  # Run some query # #  NOTE: #   - The SQL functions like 'runSQL' live as top-level functions within the #     `SAILDBUtils` namespace; # #   - As such, we have to pass the `db` connection #     object to every `SAILDBUtils` function we want to use, e.g. ... # result = SAILDBUtils::runSQL(\"   SELECT       'Hello, world!' as SOME_TEXT     FROM SYSIBM.SYSDUMMY1;  \")  # Print output: # #   |   | SOME_TEXT       | #   |---|-----------------| #   | 1 | 'Hello, world!' | # print(result) # Load the SAILR package library(SAILR)  # Connect to the database # #  NOTE: #   - We're automatically connecting using our stored username and password, #     learn more about how this works in the sections above or by visiting #     the Profile.Rmd documentation! # db = SAILR::Connection$new() # or Connection$new()  # Run some query # #  NOTE: #   - Unlike `SAILDBUtils`, we don't have to pass the `db` connection object #     around; # #   - INSTEAD, we just run the query directly by calling the `Connection`'s #     method, e.g. ... # result = db$run(\"   SELECT       'Hello, world!' as SOME_TEXT     FROM SYSIBM.SYSDUMMY1; \")  # Print output: # #   |   | SOME_TEXT       | #   |---|-----------------| #   | 1 | 'Hello, world!' | # print(result)"},{"path":[]},{"path":[]},{"path":"/articles/Connection.html","id":"name-changes-of-methods-functions","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils > Interface change(s)","what":"Name changes of methods / functions","title":"Connection","text":"Alongside additional methods features, changes existing function /method names:","code":""},{"path":"/articles/Connection.html","id":"removed-methods-fucntions","dir":"Articles","previous_headings":"The SAILR::Connection class > Comparison of SAILR and SAILDBUtils > Interface change(s)","what":"Removed methods / fucntions","title":"Connection","text":"following methods / functions removed, please find details removal example replacement code : Removed replaced SAILR::Profile class handles window logic want open login window please use rstudioapi; can find entering help('askForPassword', package='rstudioapi') help('showQuestion', package='rstudioapi') console Removed reduce reliance multiple dependencies may function future Instead, expected load save data data.frame querying database, e.g. … Removed ensure changes Phenotype Library’s API doesn’t break DBI package Instead, expected use R ConceptLibraryClient package load code list data.frame creating table db$save() first two functions removed weren’t generic enough useful latter removed count table rows expected implement , e.g. case SAILDBUtils::get_row_count … might added future required; particularly helpful please contact !","code":"library(SAILR)  # Connect to SAIL db = Connection$new()  # Read the CSV file into a data.frame # #  NOTE: `data.table = FALSE` loads it as a `data.frame` # data = data.table::fread('./some-path/to/file.csv', data.table=FALSE)  # Save to some table db$save('SESSION.SOME_TABLE', data)  # Get the data back out of the table data = db$run(\"SELECT * FROM SESSION.SOME_TABLE;\")  # Save the data data.table::fwrite('./some-path/to/file.csv', data.frame) library(SAILR)  # Connect to SAIL db = Connection$new()  # Get the row count row.count = db$run(\"SELECT count_big(*) AS ROW_COUNT FROM SYSIBM.SYSDUMMY1;\")  # Print it print(row.count$ROW_COUNT[1]) # or row.count[1, 'ROW_COUNT'] etc"},{"path":"/articles/DatasetContainer.html","id":"the-sailrdatasetcontainer-class","dir":"Articles","previous_headings":"","what":"The SAILR::DatasetContainer class","title":"DatasetContainer","text":"R6 class may feel reminiscent ProjectDatasets class, intended serve similar purpose, expanded upon somewhat limited functionality. SAILR::DatasetContainer provides method defining set datasets used project improve inline documentation, reduce issues undocumented use datasets promote hermiticity ensure input datsets configuration produce output. obvious benefit initially using ease updating datasets new refreshes.","code":""},{"path":[]},{"path":"/articles/DatasetContainer.html","id":"defining-a-sailrdatasetcontainer","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Getting Started","what":"Defining a SAILR::DatasetContainer","title":"DatasetContainer","text":"Note: Don’t forget load package enviroment entering following: library(SAILR) can define SAILR::DatasetContainer entering following:","code":"container = DatasetContainer$new(   # Define a reference to a table found within our project   #   #  NOTE:   #   - This produces a `DatasetRef` object - this is discussed below, and all   #     available datasets can be found within `SAILR.METADATA`   #   #   - Note that unlike unknown tables, you can pass `DatasetRef` items with   #     _OR_ without naming them   #   DatasetContainer$ref('pedw.spell', 'SAIL999V', as.Date('2024-07-29')),    # Define another reference to a dataset but provide the name instead:   #   #  NOTE:   #    - If you do choose to name the `DatasetRef` items, they MUST match   #      the name defined by `SAILR.METADATA` _i.e._ the name of the dataset   #      you've included in the first argument below   #   #    - You may also note that we are passing the `date` argument as a   #      character string now instead of an `as.Date()` object; either are   #      completely acceptable!   #   pedw.episode = DatasetContainer$ref('pedw.episode', 'SAIL999V', '2024-07-29'),    # You can also define references to datasets that don't have refreshes   # such as in the case of `SAILREFRV` tables, _e.g._ ...   DatasetContainer$ref('sailref.wimd2019.sm.area'),    # Define some workspace / project table that's required for the script and/or   # package that you're working on   #   #  NOTE:   #   - Unlike `DatasetRef` items, you _must_ provide any unknown tables   #     by name - i.e. they cannot be passed in a manner such as:   #     `DatasetContainer$new('SAILW999V.SOME_COHORT_TABLE')   #   #   - See below for correct usage of unknown tables:   #   some.table = 'SAILW999V.SOME_COHORT_TABLE' )"},{"path":"/articles/DatasetContainer.html","id":"where-are-the-datasetref-tables-coming-from","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Getting Started","what":"Where are the DatasetRef tables coming from?","title":"DatasetContainer","text":"DatasetRef items referenced recorded within SAILR.METADATA constant exported package. contains list commonly used datasets reference origin refreshes constructed; allows easy, reproducible use. Please see SAILR::SAILR.METADATA, can print console ’d prefer access via code, view interface using View function, e.g. …","code":"View(SAILR::SAILR.METADATA)"},{"path":[]},{"path":"/articles/DatasetContainer.html","id":"get-all-datasets-from-the-container","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Get all datasets from the container","title":"DatasetContainer","text":"","code":"# List of all dataset references container$datasets  # Loop through all datasets for (dataset in container$datasets) {   # do something...  }"},{"path":"/articles/DatasetContainer.html","id":"get-the-dataset-reference-object-from-the-container","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Get the dataset reference object from the container","title":"DatasetContainer","text":"subscript/index operator overloaded DatasetContainer instance can act R6 class list simultaneously. retrieve specific datasets container can enter following:","code":"# Get a single dataset from the container container[['pedw.spell']] # -> DatasetRef('pedw.spell')  # Get one or more datasets from the container container[c('pedw.spell', 'pedw.episode')] # -> c(DatasetRef('pedw.spell', ...))"},{"path":"/articles/DatasetContainer.html","id":"get-the-full-dataset-schema-table-name-from-the-container","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Get the full dataset schema & table name from the container","title":"DatasetContainer","text":"","code":"# Get the dataset name out of the container # #  Note: #   - The dataset name will have any required prefixes and suffixes #     prepended/appended, such that 'pedw.episode' will expand into #     'SAILXXXV.PEDW_EPISODE_20240709' etc # pedw.table.name = container$get('pedw.episode')  # Let's assume we want to use it in a query... # #  Note: #   - We're using the `stringr` package to perform string interpolation here # db$run(str_interp(\"   SELECT *     FROM ${pedw.table.name}; \"))  # i.e. the above interpolated string has become: # \"   SELECT *     FROM SAIL999V.PEDW_SPELL_20240709; \""},{"path":"/articles/DatasetContainer.html","id":"retrieve-specific-parts-from-a-dataset-reference-from-the-container","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Retrieve specific parts from a dataset reference from the container","title":"DatasetContainer","text":"may retrieve specific components dataset reference $retrieve method. Please see DatasetContainer$retrieve method documentation details different components can retrieved DatasetRef / DatasetItem object. Example usage might :","code":"# Retrieve components for a single dataset container$retrieve('pedw.episode', 'schema') # -> the schema provided by the container  # Retrieve one or more components from one or more datasets container$retrieve(   c('pedw.spell', 'pedw.episode'),   c('date', 'name', 'schema', 'origin', 'relation') )"},{"path":"/articles/DatasetContainer.html","id":"get-the-length-of-datasets-contained-by-the-container","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Get the length of datasets contained by the container","title":"DatasetContainer","text":"","code":"# Using the length built-in function length(container)  # Using the class method container$length()"},{"path":"/articles/DatasetContainer.html","id":"set-a-specific-dataset-reference-to-another-reference","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Interacting with the DatasetContainer","what":"Set a specific dataset reference to another reference","title":"DatasetContainer","text":"","code":"# Update pedw.spell to another refresh date older.pedw = DatasetContainer$ref('pedw.spell', 'SAILXXXV', '2023-07-29') container$set('pedw.spell', older.pedw)"},{"path":[]},{"path":"/articles/DatasetContainer.html","id":"validating-whether-datasets-are-contained-by-the-datasetcontainer","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Validation","what":"Validating whether datasets are contained by the DatasetContainer","title":"DatasetContainer","text":"","code":"# Define your container container = DatasetContainer$new(   DatasetContainer$ref('pedw.spell', schema='SAIL999V', '2024-07-29'),   DatasetContainer$ref('sailref.wimd2019.sm.area') )  # Later... ensure the correct datasets have been added # #  NOTE: #   - This will throw an error if the datasets aren't present; if that's not #     what you want to happen and would prefer a logical value then please #     add a `assert=FALSE` argument to the call below # container$require.datasets(   c('pedw.spell', 'sailref.wimd2019.sm.area'),   assert=TRUE # defaults to TRUE )"},{"path":"/articles/DatasetContainer.html","id":"validating-whether-datasets-are-accessible-to-the-client","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Validation","what":"Validating whether datasets are accessible to the client","title":"DatasetContainer","text":"","code":"# Define your container container = DatasetContainer$new(   DatasetContainer$ref('wlgp.event', schema='SAIL999V', '2024-04-01'),   DatasetContainer$ref('sailref.wimd2019.sm.area') )  # Define the db connection db = Connection$new()  # Ensure that the connect user can access the tables # #  NOTE: #   - This will throw an error if the datasets aren't accessible; if that's not #     what you want to happen and would prefer a logical value then please #     add a `assert=FALSE` argument to the call below # container$require.access(   # An active, valid db connection to test if the SAIL DB account   # can access the datasets   db         = db,   # A named list in which the keys (left-hand side) describe the dataset(s) and   # the values (right-hand side) describe the privileges required by the client   #   # NOTE:   #   - 'ALL' expands to all privileges if used; please find the privileges   #     allowed in the `DatasetContainer$require.access` documentation   #   privileges = list(     # Only select is granted on SAIL reference tables but you could use     # one of the following: ALL, INSERT, UPDATE, ALTER, DELETE etc     #     wlgp.event               = 'SELECT',     # The required privileges can be a vector or a list, e.g. ...     #     #    - sailref.wimd2019.sm.area = c('SELECT', 'INSERT', 'DELETE')     #  OR;     #    - sailref.wimd2019.sm.area = list('SELECT', 'ALTER')     #     sailref.wimd2019.sm.area = c('SELECT')   ),   # Throw an error if they aren't accessible (defaults to `TRUE`)   assert     = TRUE )"},{"path":"/articles/DatasetContainer.html","id":"validating-whether-datasets-contain-the-columns-required-by-your-code","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Validation","what":"Validating whether datasets contain the columns required by your code","title":"DatasetContainer","text":"","code":"# Define your container container = DatasetContainer$new(   DatasetContainer$ref('pedw.spell', schema='SAIL999V', '2024-07-29'),   DatasetContainer$ref('sailref.wimd2019.sm.area') )  # Check whether the dataset(s) columns are as expected container$require.shape(   # An active, valid db connection to test if the SAIL DB account   # can access the datasets   db       = db,   # A list of lists in which the keys (left-hand side) describe the table names   # and the values (right-hand side) describe a list of columns and their expected   # types   criteria = list(     # Define one or more datasets to test     #     #  NOTE:     #   - You can test as many columns or as little columns as you want;     #     you can just test a subset if you'd prefer and do not have to      #     define every column name/type     #     #   - All SQL types are supported as described by either the SYSIBMADM and/or     #     SYSCAT schemas whom describe the table shape(s)     #     sailref.wimd2019.sm.area = list(       # LSOA column should be a CHARACTER       #       #  NOTE:       #   - You do not have to supply the size, i.e. `CHARACTER(9)`, you can       #     just define the type instead (`CHARACTER`)       #       #   - Note that this holds true for other types with a size too, incl.       #     but not limited to `DECIMAL(31,8)` where 31 = the size and       #     8 = the scale       #       LSOA2011_CD   = 'CHARACTER(9)',        # LSOA name column should be a VARCHAR       #       #  NOTE:       #   - As described above, we're not validating the size here; we're just       #     validating that the column exists and that it's of type 'VARCHAR'       #   - However, we could validate the size if we wanted to by amending       #     the following to `VARCHAR(45)` or some other size       #       LSOA2011_DESC = 'VARCHAR',        # Income rank column should be a INTEGER       #       INCOME_RANK   = 'INTEGER'     )   ),   # Throw an error if the datasets aren't in the shape expected; defaults to   # `TRUE`   assert = TRUE )"},{"path":[]},{"path":"/articles/DatasetContainer.html","id":"static-methods-to-generate-datasetref-objects","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Misc. methods","what":"Static methods to generate DatasetRef objects","title":"DatasetContainer","text":"Please see method documentation detailed explanation use method, example:","code":"# Define some dataset reference with a refresh date # # NOTE: #  - The `wlgp.event` table is described by the `SAILR.METADATA` #    list - see documentation and/or call `View(SAILR.METADATA)` # DatasetContainer$ref('wlgp.event', 'SAILXXXV', '2024-04-01')  # The date field can accept either (a) a character string # or (b) an as.Date() / as.POSIXct() object # # NOTE: #  - Multiple different datetime format(s) are used in an attempt to parse the #    date if a character string is specified, but you can provide your own date #    format and time zone if prefered # #  - The timezone defaults to `UTC` if not set # DatasetContainer$ref(   # Select the `wlgp.event` dataset   dataset  = 'wlgp.event',    # Define where this table is located; in this case we'll use some project   # schema   #   #  NOTE:   #   - Only project, workspace and encryption tables require a schema;   #     these are usually tables that require a refresh suffix e.g.   #     some `SAILXXXV.WLGP_GP_EVENT_20240401` table   #   #   - Reference tables, such as in the case of the the WIMD SAILREFRV table   #     (available: `SAILREFRV.WIMD_2019_INDEX_AND_DOMAIN_RANKS_BY_SMALL_AREA`)   #     do not require a date nor a schema   #   schema   = 'SAILXXXV',    # The refresh date of the dataset   #   #  NOTE:   #   - As above, this is NOT always necessary!   #   date     = '01-04-2024',    # How the date is formatted, see as.Date() or as.POSIXct() on CRAN   # for more information on how date formatting works   #   date.fmt = '%d-%m-%Y',    # The datetime timezone, see as.Date() or as.POSIXCt() on CRAN for more   # information   #   date.tz  = 'UTC' )  # Create a reference to some reference dataset, e.g. WIMD2019... # # NOTE: #  - Please take note of the fact that we are only supplying the dataset #    name # #  - The reason for this is that the SAILREF.WIMD2019 is a static reference #    table that doesn't include refreshes; the next version of the WIMD #    dataset will likely be created as a new, distinct table # DatasetContainer$ref(   dataset = 'sailref.wimd2019.sm.area' )"},{"path":"/articles/DatasetContainer.html","id":"static-methods-validation","dir":"Articles","previous_headings":"The SAILR::DatasetContainer class > Misc. methods","what":"Static methods & validation","title":"DatasetContainer","text":"following static methods may used type validation SAILR::DatasetContainer instances, can used test names datasets:","code":"# Check if some object is a `SAILR::DatasetContainer` # #  NOTE: #   - Static methods CANNOT be accessed via the `container` instance; #     they can only be accessed via the top-level class like below: # if (DatasetContainer$is(container)) {   print('It is a DatasetContainer!') }  try({   container$is(container) # this will fail! })  # Check if a name is reserved by `SAILR.METADATA` # #  Note: #   - As above, this CANNOT be accessed via the `container` instance; you must #     access it at the top-level `DatasetContainer` # DatasetContainer$is.reserved('wlgp.event') # -> TRUE"},{"path":"/articles/Profile.html","id":"the-sailrprofile-class","dir":"Articles","previous_headings":"","what":"The SAILR::Profile class","title":"Profile","text":"R6 class intended used secret manager SAIL DB authentication; ’s primarily intended used internally SAILR::Connection exported use might useful projects. ’re interested using SAIL database interface, .e. SAILR::Connection class, can safely ignore documentation!","code":""},{"path":"/articles/Profile.html","id":"getting-started","dir":"Articles","previous_headings":"The SAILR::Profile class","what":"Getting Started","title":"Profile","text":"Note: lightweight R6 wrapper around Keyring package +/- changes improve accessibility & ease use within SAIL Databank. Keyring package available Cran authored maintained Gabor Csardi. Github repository available outside SAIL’s Gateway TRE ","code":""},{"path":"/articles/Profile.html","id":"creating-a-sailrprofile-instance","dir":"Articles","previous_headings":"The SAILR::Profile class > Getting Started","what":"Creating a SAILR::Profile instance","title":"Profile","text":"Note: Don’t forget load package enviroment entering following: library(SAILR) can create Profile instance entering following: , grab Profile instance active SAILR::Connection like :","code":"profile = Profile$new(   # Sets the keychain name, i.e. the name of the keychain that contains   # the secrets defined by the profile   #   #  NOTE:   #   - Defaults to `SAILDB` but can be changed to any other name if you'd prefer   #     to separate your secrets between applications   #   keychain.name = 'SAILDB' ) db = Connection$new() # if you haven't already connected  # Get the active profile (if any) profile = db$get.profile()"},{"path":"/articles/Profile.html","id":"example-usage","dir":"Articles","previous_headings":"The SAILR::Profile class","what":"Example usage","title":"Profile","text":"Please see example usage :","code":"profile = Profile$new() # if you haven't already got a profile instance  # Attempt to check whether we have a secret for a username # associated with a database # # NOTE: the database argument defaults to `PR_SAIL` # profile$has.secrets('some_username', 'some_database')  # Attempts to collect the secrets associated with the specified # username and database # # NOTE: the database argument defaults to `PR_SAIL` # profile$get.secrets('some_username', 'some_database')  # Checks whether the 'super.secret.password' is the secret stored within # the profile for the 'some_username' account for the 'some_database' database # # NOTE: the database argument defaults to `PR_SAIL` # profile$is.secret('some_username', 'super.secret.password', 'some_database')  # Sets or creates & stores the secret for the 'some_username' account # with the 'super.secret.password' secret, associated with the 'some_database' database # # NOTE: the database argument defaults to `PR_SAIL` # profile$is.secret('some_username', 'super.secret.password', 'some_database')  # Attempts to remove the 'some_username' secret associated with the 'some_database' database # # NOTE: the database argument defaults to `PR_SAIL` # profile$get.secrets('some_username', 'some_database')  # Field members...  ## Get the current keychain name associated with this profile profile$keychain.name  ## Get the username of the account associated with this machine profile$system.user  # Static methods...  ## Check if some object is a `SAILR::Profile` ## ##  NOTE: ##   - Static methods CANNOT be accessed via the `profile` instance; ##     they can only be accessed via the top-level class like below: ## if (Profile$is(profile)) {   print('It is a Profile!') }  try({   profile$is(profile) # this will fail! })  ## Attempt to clear a secret associated with a username and database ## ##  NOTE: ##   - As above, this can only be accessed by the top-level class ##   - The latter argument defaults to `SAILDB` and describes the keychain name ## Profile$clear('PR_SAIL:some_username', 'SAILDB')"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack Scanlon. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scanlon J (2024). SAILR: Unofficial SAIL Database Interface. R package version 0.1.0.","code":"@Manual{,   title = {SAILR: Unofficial SAIL Database Interface},   author = {Jack Scanlon},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"sailr","dir":"","previous_headings":"","what":"Unofficial SAIL Database Interface","title":"Unofficial SAIL Database Interface","text":"unofficial package interface interact SAIL Databank’s database via R.","code":""},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"Getting Started","what":"Installation","title":"Unofficial SAIL Database Interface","text":"Installing SAILR whilst inside SAIL’s TRE Gateway: Installing SAILR whilst outside gateway: [!IMPORTANT] won’t able use method whilst inside gateway Github blocked security; use first method developing inside gateway","code":"# Install from resource (`R:/`) directory install.packages(   pkgs   = 'R:/R_Packages/SAILR/SAILR_0.1.0.tar.gz',   repos  = NULL,   source = 'source' ) # Install devtools if not already installed install.packages('devtools')  # Install from github devtools::install_github('JackScanlon/SAILR')"},{"path":"/index.html","id":"connecting-to-sails-db","dir":"","previous_headings":"Getting Started","what":"Connecting to SAIL’s DB","title":"Unofficial SAIL Database Interface","text":"installed, may connect database described :","code":"# Load the package library(SAILR)  # Connect to the datase # #  NOTE: #   - You will be automatically connected using your gateway credentials if #     they have already been stored by `SAILR::Profile`; otherwise you will #     be prompted to enter your username/password # db = Connection$new()  # Check if we're connected (not required) if (db$connected) {   print('We are connected!') }  # Perform some query db$run(\"   SELECT       'Hello, world!' AS MESSAGE     FROM SYSIBM.SYSDUMMY1; \")"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Unofficial SAIL Database Interface","text":"view detailed examples explanations, see: ’re viewing documentation website: please see Reference page(s) available article(s), e.g. Connection article ’re viewing via Github: please see documentation vignettes","code":""},{"path":"/reference/SAIL-Connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Connection — Connection","title":"Connection — Connection","text":"SAILR ODBC DBI connection","code":""},{"path":"/reference/SAIL-Connection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connection — Connection","text":"Available options: SAILR.USE.SECRETS: Whether use SAILR::Profile manager store & load secrets, .e. password storage manager username used authenticate database connections SAILR.DROP.UDF: Specifies whether SAILR::Connection$drop() method use SAIL user-defined function instead using anonymous procedure SAILR.CHUNK.SIZE: Describes number rows sent statement saving data.frame database; can reduced increased depending wide table structure SAILR.TIMEZONE: Specifies timezone used DATE, TIMESTAMP DATE columns SAILR.QUIET: Determines whether SAILR::Connection methods send condition messages operations started / finished; can used measure performance /debug statement(s) SAILR..WARN: Determines whether warnings logged console SAILR.THROW.ERRORS: Specifies whether current thread halted error encountered; expected wrap SAILR::Connection calls error handler deactivate option","code":""},{"path":"/reference/SAIL-Connection.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Connection — Connection","text":"profile (Profile|NA) private field referencing R6 SAILR::Profile class using.profile (logical) private field specifying whether connection using profile","code":""},{"path":"/reference/SAIL-Connection.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Connection — Connection","text":"connected (S4|NA) private field referencing ODBC handle connected (character|NA) private field referencing sanitised connection string used connect database profile (Profile|NA) private field referencing R6 SAILR::Profile class using.profile (logical) private field specifying whether connection using profile connected (logical) read-field describing whether connection currently active whether valid connected (character|NA) read-field describing connection string used connect database connected (character|NA) read-field referecing username used connect database connected (character|NA) read-field describing name connected database","code":""},{"path":[]},{"path":"/reference/SAIL-Connection.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connection — Connection","text":"Connection$new() Connection$.temporary() Connection$exists() Connection$run() Connection$query() Connection$execute() Connection$transaction() Connection$exit.transaction() Connection$save() Connection$create.() Connection$map.() Connection$grant() Connection$drop() Connection$truncate() Connection$get.hnd() Connection$get.profile() Connection$clone()","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connection — Connection","text":"Initialise new connection","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$new(   username = NA,   password = NA,   database = SAILR.DEF$DATABASE,   use.profile = getOption(\"SAILR.USE.SECRETS\", TRUE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"username (character) optional username; defaults local machine's username use.profile flagged, otherwise prompts client enter username password (character) optional password database (character) optional database name; defaults SAILR.DEF$DATABASE constant use.profile (logical) Specifies whether SAILR attempt grab database's password profile's keychain; defaults option(SAILR.USE.PROFILE=TRUE) Note: prompted insert username/password fail user associated SAILR::Profile keychain. Similarly, connection fails authenticate prompted re-enter username password","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"new SAILDB connection","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-is-temporary-","dir":"Reference","previous_headings":"","what":"Method is.temporary()","title":"Connection — Connection","text":"Determines whether given table temporary based reference","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$is.temporary(table.reference)"},{"path":"/reference/SAIL-Connection.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE]","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"Either () logical reflecting table's expected temporary status; (b) NA value invalid table reference","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-exists-","dir":"Reference","previous_headings":"","what":"Method exists()","title":"Connection — Connection","text":"Determines whether table exists","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$exists(   table.reference = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE] stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"Either () logical reflecting table's existence; (b) NA value invalid operation","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"Connection — Connection","text":"Sends executes SQL statement; accepts handles SELECT queries, stored procedure execution, creation tables, /data manipulation queries like INSERT UPDATE","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$run(   stmt = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"stmt (character) SQL statement string stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"Either: resulting data.frame executing query e.g. SELECT statement ; logical value reflecting success executing statement e.g. INSERT statement, function call etc;","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-query-","dir":"Reference","previous_headings":"","what":"Method query()","title":"Connection — Connection","text":"Submits synchronously executes specified SQL query","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$query(   stmt = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"stmt (character) SQL statement string stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"resulting data.frame SELECT statement; can return logical stop..error behaviour inactive","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-execute-","dir":"Reference","previous_headings":"","what":"Method execute()","title":"Connection — Connection","text":"Submits synchronously executes SQL statement","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$execute(   stmt = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"stmt (character) SQL statement string stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"number rows affected; can return logical stop..error behaviour inactive","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-transaction-","dir":"Reference","previous_headings":"","what":"Method transaction()","title":"Connection — Connection","text":"Run sequential, synchronous SALIR::Connection method calls transation; rollbacks can performed exiting transaction using SALIR::Connection$exit.transaction. Transactions automatically committed end expression assuming errors occurred /calls SALIR::Connection$exit.transaction taken place","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$transaction(   expr = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"expr (expression) arbitrary transaction expression stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical reflecting success transaction","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-exit-transaction-","dir":"Reference","previous_headings":"","what":"Method exit.transaction()","title":"Connection — Connection","text":"Used exit transaction perform rollback within SAILR::Connection$transaction expression","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$exit.transaction()"},{"path":"/reference/SAIL-Connection.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Connection — Connection","text":"Attempt save data.frame object table; either creating new table appending existing table; note operation transactional, statements rolled back fails point","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$save(   table.reference = NA,   table.data = NA,   can.append = FALSE,   can.overwrite = FALSE,   sanitise.columns = TRUE,   logical.as.integer = TRUE,   parse.datetimes = FALSE,   reduce.db.logging = TRUE,   chunk.size = getOption(\"SAILR.CHUNK.SIZE\", SAILR.DEF$MIN.CHUNK.SIZE),   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE] table.data (data.frame) data.frame wish save can.append (logical) Whether append table already exists; defaults FALSE can.overwrite (logical) Whether truncate overwrite table already exists; defaults FALSE sanitise.columns (logical) Whether strip non-DB2 compliant characters column's name; defaults TRUE logical..integer (logical) Whether insert logical types SMALLINT datatype; otherwise resolves VARCHAR type; defaults TRUE parse.datetimes (logical) Whether attempt parse character columns one [ DATE | TIME | TIMESTAMP ]; defaults FALSE reduce.db.logging (logical) Alters global tables stop initial logging; defaults TRUE chunk.size (integer) Determines size insert statement chunks; defaults option(SAILR.CHUNK.SIZE=SAILR.DEF$MIN.CHUNK.SIZE) stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describing success action","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-create-from-","dir":"Reference","previous_headings":"","what":"Method create.from()","title":"Connection — Connection","text":"Wrapper method create new table SELECT statement; note operation transactional, statements rolled back fails point","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$create.from(   table.reference = NA,   stmt = NA,   can.append = FALSE,   can.overwrite = FALSE,   reduce.db.logging = TRUE,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE] stmt (character) select query used build cloned table can.append (logical) Whether append table already exists; defaults FALSE can.overwrite (logical) Whether truncate overwrite table already exists; defaults FALSE reduce.db.logging (logical) Alters global tables stop initial logging; defaults TRUE stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describing success action","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-map-from-","dir":"Reference","previous_headings":"","what":"Method map.from()","title":"Connection — Connection","text":"Wrapper method create new table another table whilst mapping columns different subset; note operation transactional, statements rolled back fails point","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$map.from(   input.reference = NA,   output.reference = NA,   output.map = NA,   can.overwrite = FALSE,   reduce.db.logging = TRUE,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"input.reference (character) input table clone shape [SCHEMA].[TABLE] output.reference (character) output table map , shape [SCHEMA].[TABLE] output.map (list) list key-value pair characters describing column name mapping /subset columns can.overwrite (logical) Whether truncate overwrite table already exists; defaults FALSE reduce.db.logging (logical) Alters global tables stop initial logging; defaults TRUE stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describing success operation","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-grant-","dir":"Reference","previous_headings":"","what":"Method grant()","title":"Connection — Connection","text":"Attempts grant SELECT specified schema, tables, specified user(s)","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$grant(   schema = NA,   tables = NA,   users = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"schema (character) schema name tables (character|list<character>) optional list/vector table names grant access ; shape either () scalar character, (b) character vector, (c) list characters users (character|list<character>) list users grant SELECT permission stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describes whether action successful","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-drop-","dir":"Reference","previous_headings":"","what":"Method drop()","title":"Connection — Connection","text":"Attempts drop table","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$drop(   table.reference = NA,   ignore.extinct = TRUE,   use.udf = getOption(\"SAILR.DROP.UDF\", TRUE),   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE] ignore.extinct (logical) Whether ignore non-existent tables; defaults TRUE use.udf (logical) Whether use user-defined DROP_IF_EXISTS function found PR_SAIL database; defaults option(SAILR.DROP..UDF=TRUE) stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describes whether action successful","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-truncate-","dir":"Reference","previous_headings":"","what":"Method truncate()","title":"Connection — Connection","text":"Attempts truncate table","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$truncate(   table.reference = NA,   reuse.storage = FALSE,   obey.del.triggers = FALSE,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.logs = getOption(\"SAILR.QUIET\", FALSE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-Connection.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"table.reference (character) table schema & name reference shape [SCHEMA].[TABLE] reuse.storage (logical) Whether specify storage allocated table continue allocated table; defaults FALSE obey.del.triggers (logical) Whether specify want throw error delete triggers defined table; defaults FALSE stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.logs (logical) Whether suppress message logs; defaults option(SAILR.QUIET=FALSE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":"/reference/SAIL-Connection.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"logical describes whether action successful","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-get-hnd-","dir":"Reference","previous_headings":"","what":"Method get.hnd()","title":"Connection — Connection","text":"Attempts retrieve stored ODBC handle","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$get.hnd()"},{"path":"/reference/SAIL-Connection.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"Either () stored DBIConnection handle type S4; (b) connected: NA","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-get-profile-","dir":"Reference","previous_headings":"","what":"Method get.profile()","title":"Connection — Connection","text":"Attempts retrieve stored SAILR::Profile","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$get.profile()"},{"path":"/reference/SAIL-Connection.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Connection — Connection","text":"Either () stored SAILR::Profile type R6 initialised; (b) NA","code":""},{"path":"/reference/SAIL-Connection.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Connection — Connection","text":"objects class cloneable method.","code":""},{"path":"/reference/SAIL-Connection.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Connection — Connection","text":"","code":"Connection$clone(deep = FALSE)"},{"path":"/reference/SAIL-Connection.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connection — Connection","text":"deep Whether make deep clone.","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetContainer — DatasetContainer","title":"DatasetContainer — DatasetContainer","text":"container describing datasets associated project override length() function dispatches call instance's DatasetContainer$length method Subscript operator overload retrieve one table references derived indexed dataset(s) Subscript operator overload retrieve one table references derived indexed dataset(s)","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"# S3 method for class 'DatasetContainer' length(obj, ...)  # S3 method for class 'DatasetContainer' obj[...]  # S3 method for class 'DatasetContainer' obj[[...]]"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"obj (<DatasetContainer>) DatasetContainer instance ... Optional varargs length function datasets (character|vector) datasets index dataset (character) dataset index","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DatasetContainer — DatasetContainer","text":"string representation DatasetContainer instance dataset references, contained instance dataset reference, contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DatasetContainer — DatasetContainer","text":"helper helper class can used : Utilities – Dataset-related utility methods, e.g. confirming access permissions, collecting newest refresh tables etc Parameterisation – General interface parameterise set datasets used user-defined function /method Validation – Can used user-defined operations validate inclusion projects Documentation – inline documentation datasets associated project Several options available modify instance's behaviour can either modified globally per call basis: SAILR.QUIET: Determines whether DatasetContainer methods log debug information SAILR..WARN: Determines whether warnings logged console SAILR.THROW.ERRORS: Specifies whether current thread halted error encountered; expected wrap SAILR::Connection calls error handler deactivate option","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DatasetContainer — DatasetContainer","text":"reference (list) private reference datasets contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"DatasetContainer — DatasetContainer","text":"reference (list) private reference datasets contained instance datasets (character|NA) read-field describing datasets contained instance","code":""},{"path":[]},{"path":"/reference/SAIL-DatasetContainer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DatasetContainer — DatasetContainer","text":"DatasetContainer$new() DatasetContainer$get() DatasetContainer$set() DatasetContainer$retrieve() DatasetContainer$require.datasets() DatasetContainer$require.like() DatasetContainer$require.access() DatasetContainer$require.shape() DatasetContainer$[() DatasetContainer$[[() DatasetContainer$length() DatasetContainer$clone()","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DatasetContainer — DatasetContainer","text":"Initialise new DatasetContainer","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$new(...)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"... set datasets contained instance, arguments named unless given DatasetContainer$ref. See $intliaze Example section","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"new DatasetContainer instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetContainer — DatasetContainer","text":"","code":"\\dontrun{ # Initialise the container... datasets = DatasetContainer$new(   # Some reference table unknown to \\code{SAILR.METADATA}; character string references must be a named argument and can't be a reserved name - see \\code{DatasetContainer$is.reserved}   some.table               = 'SAILREFRV.SOME_TABLE',   # Some project table unknown \\code{SAILR.METADATA}; refresh dates should be appended to the name as usual - these can be refreshed using the \\code{DatasetContainer$pull.refresh} method   other.table              = 'SAILXXXV.OTHER_TABLE_20240905',   # Include some reference table, no schema is needed since this is retrieved from SAILREFRV. Note that the argument name _must_ match \\code{DatasetContainer$ref}'s \\code{$ref} property if you are using a named argument   sailref.wimd2019.sm.area = DatasetContainer$ref('sailref.wimd2019.sm.area'),   # Include some reference table from a project schema; and, as above, the argument name must match the reference name   adde.deaths              = DatasetContainer$ref('adde.deaths', 'SAILXXXV'),   # Include a specific refresh of some reference table from a project schema; and, as above, the argument name must match   abde.births              = DatasetContainer$ref('abde.births', 'SAILXXXV', date='20240905'),   DatasetContainer$ref('wdsd.pers', 'SAILXXXV', '20240905') ) }"},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"DatasetContainer — DatasetContainer","text":"Get table reference name dataset shape [SCHEMA].[TABLE]","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$get(dataset)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"dataset (character) name dataset select","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"Either () character string representing table reference contained instance; otherwise (b) NA value","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"DatasetContainer — DatasetContainer","text":"Sets key-value pair given dataset","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$set(dataset, reference)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"dataset (character) name dataset update reference (character|DatasetContainer$ref) table reference shape [SCHEMA].[TABLE], reference structure generated DatasetContainer$ref static method","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"reference instance can used chaining, e.g. dataset$set('gp.event', 'schema.table')$set('pedw.spell', 'schema.table')","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-retrieve-","dir":"Reference","previous_headings":"","what":"Method retrieve()","title":"DatasetContainer — DatasetContainer","text":"Retrieves information relating specified dataset(s)","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$retrieve(   dataset,   properties = NA,   stop.on.error = getOption(\"SAILR.THROW.ERRORS\", TRUE),   suppress.warnings = getOption(\"SAILR.NO.WARN\", FALSE) )"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"dataset (character|vector|list) name dataset, vector/list dataset names properties (list|vector) optional flat list vector characters specifying properties retrieve, see DatasetContainer$get example section information stop..error (logical) Whether return FALSE logical error encountered instead stopping execution parent thread; defaults option(SAILR.THROW.ERRORS=TRUE) suppress.warnings (logical) Whether suppress warnings; defaults option(SAILR..WARN=FALSE)","code":""},{"path":[]},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"Either: dataset present properties provided – list describing dataset (list lists multiple datasets selected) dataset present given properties – key-value pair list containing information requested (list lists multiple datasets selected) dataset name present – NA value","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-require-datasets-","dir":"Reference","previous_headings":"","what":"Method require.datasets()","title":"DatasetContainer — DatasetContainer","text":"Tests whether given datasets defined within DatasetContainer","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$require.datasets(datasets, assert = TRUE)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"datasets (character|list|vector) scalar character describing single dataset, list/vector characters describing datasets refreshed. specified dataset element named, e.g. list(abde.births='ABDE_BIRTHS_20240630'), method test abde.births present & refers ABDE_BIRTHS_20240630 table. Note including schema, e.g. SAIL####V.ABDE_BIRTHS_20240630, test schema dataset name. assert (logical|NA) optional logical describes whether throw error stop execution current thread one datasets present; defaults TRUE","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"logical describing whether datasets contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-require-like-","dir":"Reference","previous_headings":"","what":"Method require.like()","title":"DatasetContainer — DatasetContainer","text":"Tests whether dataset's reference refers specific relation type","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$require.like(datasets, relation, assert = TRUE)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"datasets (character|list|vector) name dataset, list/vector characters, specifying dataset(s) test relation (character) scalar character relation comparator(s) can one : BASE, REFERENCE, SESSION, PROJECT, WORKSPACE, ENCRYPTION UNKNOWN - see SAILR.DEF$DREF.RELATION details assert (logical|NA) optional logical describes whether throw error stop execution current thread one datasets present; defaults TRUE","code":""},{"path":[]},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"logical describing whether dataset ","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-require-access-","dir":"Reference","previous_headings":"","what":"Method require.access()","title":"DatasetContainer — DatasetContainer","text":"Tests whether client privileges interface datasets defined within container. Note 'privileges' describe one following privileges: SELECT, UPDATE, INSERT etc. Please see IBM's documentation user privileges information, see SAILR.DEF$PRIVILEGES","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$require.access(db, privileges, assert = TRUE)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"db (<SAILR>) active, valid <SAILR> database connection privileges (list) named list key describes dataset, value describes privileges required, e.g. list(gp.events=c('INSERT', 'SELECT'), pedw.spell=''). Note expands privileges described SAILR.DEF$PRIVILEGES assert (logical|NA) optional logical describes whether throw error stop execution current thread one datasets present; defaults TRUE","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"logical reflecting whether client privileges interface datasets","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-require-shape-","dir":"Reference","previous_headings":"","what":"Method require.shape()","title":"DatasetContainer — DatasetContainer","text":"Tests whether given dataset(s) meet selected criteria ensuring columns datatypes match specified","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$require.shape(db, criteria, assert = TRUE)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"db (<SAILR>) active, valid <SAILR> database connection criteria (list) list column criteria one dataset(s), e.g. list(gp.event=list(ALF_PE='BIGINTEGER))}, key inner list describes column name(s) value(s) specify required column's type. note types fuzzy matched exclude matching size unless explicitly specified, e.g. list(.table=list(SOME_TEXT_COL='VARCHAR')) v.s. list(.table=list(SOME_TEXT_COL='VARCHAR(200)')). Please note names, columns types case sensitive. assert(logical|NA) optional logical describes whether throw error stop execution current thread one datasets present; defaults TRUE","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"logical reflecting whether criteria met","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-","dir":"Reference","previous_headings":"","what":"Method [()","title":"DatasetContainer — DatasetContainer","text":"Subscript operator overload retrieve one table references derived indexed dataset(s)","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$[(datasets)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"datasets (character|vector) datasets index","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"dataset references, contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetContainer — DatasetContainer","text":"","code":"\\dontrun{ some.container[c('gp.event', 'other.table')] }"},{"path":"/reference/SAIL-DatasetContainer.html","id":"method--1","dir":"Reference","previous_headings":"","what":"Method [[()","title":"DatasetContainer — DatasetContainer","text":"Subscript operator overload retrieve one table references derived indexed dataset(s)","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$[[(dataset)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"dataset (character) dataset index","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"dataset reference, contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetContainer — DatasetContainer","text":"","code":"\\dontrun{ some.container[['gp.event']] }"},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"DatasetContainer — DatasetContainer","text":"Compute length datasets contained instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$length(...)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"... Optional varargs length call","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"DatasetContainer — DatasetContainer","text":"integer describing number datasets referenced instance","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DatasetContainer — DatasetContainer","text":"objects class cloneable method.","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetContainer — DatasetContainer","text":"","code":"DatasetContainer$clone(deep = FALSE)"},{"path":"/reference/SAIL-DatasetContainer.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetContainer — DatasetContainer","text":"deep Whether make deep clone.","code":""},{"path":"/reference/SAIL-DatasetContainer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetContainer — DatasetContainer","text":"","code":"## ------------------------------------------------ ## Method `DatasetContainer$new` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Initialise the container... datasets = DatasetContainer$new(   # Some reference table unknown to \\code{SAILR.METADATA}; character string references must be a named argument and can't be a reserved name - see \\code{DatasetContainer$is.reserved}   some.table               = 'SAILREFRV.SOME_TABLE',   # Some project table unknown \\code{SAILR.METADATA}; refresh dates should be appended to the name as usual - these can be refreshed using the \\code{DatasetContainer$pull.refresh} method   other.table              = 'SAILXXXV.OTHER_TABLE_20240905',   # Include some reference table, no schema is needed since this is retrieved from SAILREFRV. Note that the argument name _must_ match \\code{DatasetContainer$ref}'s \\code{$ref} property if you are using a named argument   sailref.wimd2019.sm.area = DatasetContainer$ref('sailref.wimd2019.sm.area'),   # Include some reference table from a project schema; and, as above, the argument name must match the reference name   adde.deaths              = DatasetContainer$ref('adde.deaths', 'SAILXXXV'),   # Include a specific refresh of some reference table from a project schema; and, as above, the argument name must match   abde.births              = DatasetContainer$ref('abde.births', 'SAILXXXV', date='20240905'),   DatasetContainer$ref('wdsd.pers', 'SAILXXXV', '20240905') ) } # }   ## ------------------------------------------------ ## Method `DatasetContainer$[` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ some.container[c('gp.event', 'other.table')] } # }   ## ------------------------------------------------ ## Method `DatasetContainer$[[` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ some.container[['gp.event']] } # }"},{"path":"/reference/SAIL-Metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata — SAILR.METADATA","title":"Metadata — SAILR.METADATA","text":"list datasets, table references associated metadata used DatasetContainer lookup & constants. Please use View() function see available options, e.g. View(SAILR.METADATA)","code":""},{"path":"/reference/SAIL-Metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata — SAILR.METADATA","text":"","code":"SAILR.METADATA"},{"path":"/reference/SAIL-Metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata — SAILR.METADATA","text":"object class list length 87.","code":""},{"path":"/reference/SAIL-Metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metadata — SAILR.METADATA","text":"datasets defined :","code":"# The key, i.e. [some.name], is the reserved dataset name some.name   = list(   ref    = 'some.name',  # an internal reference to the reserved name   name   = 'SOME_NAME',  # the name of the table which may or may not contain a prefix, e.g. 'WLGP_'   origin = 'SAILXXXXV',  # a reference to the base table from which this table can be found   tag    = '_${date}',   # how refresh dates are tagged, i.e. some interpolated suffix; if \\code{FALSE | NA} then no interpolation is performed   alt    = 'WDSD',       # a prefix to the table name when defined as a character string; if \\code{FALSE | NA} then no prefix will be added   static = FALSE         # the \\code{static} property describes whether the table is held by a reference schema instead of being copied to a project schema )"},{"path":"/reference/SAIL-Profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile — Profile","title":"Profile — Profile","text":"User profile secret manager SAIL DB authentication","code":""},{"path":"/reference/SAIL-Profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Profile — Profile","text":"Profile secret manager SAIL DB authentication; exported allow use personal projects /better manage secrets","code":""},{"path":"/reference/SAIL-Profile.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Profile — Profile","text":"keychain (character|NA) private reference keychain name connected (character|NA) read-field describing name keychain","code":""},{"path":"/reference/SAIL-Profile.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Profile — Profile","text":"keychain (character|NA) private reference keychain name connected (character|NA) read-field describing name keychain system.user (character|NA) read-helper field derive client's system username","code":""},{"path":[]},{"path":"/reference/SAIL-Profile.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Profile — Profile","text":"Profile$new() Profile$.secrets() Profile$get.secrets() Profile$.secret() Profile$set.secrets() Profile$remove.secrets() Profile$clone()","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Profile — Profile","text":"Initialise user profile instance","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$new(keychain.name = NA)"},{"path":"/reference/SAIL-Profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"keychain.name (character|NA) keychain name; defaults SAILR.DEF$KEYCHAIN name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"new user profile instance","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-has-secrets-","dir":"Reference","previous_headings":"","what":"Method has.secrets()","title":"Profile — Profile","text":"Method check whether secret exists given username database","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$has.secrets(username = NA, database = SAILR.DEF$DATABASE)"},{"path":"/reference/SAIL-Profile.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"username (character|NA) Optional username relates secrets database (character|NA) name database secrets relate ; defaults SAILR.DEF$DATABASE name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"logical describing whether secrets exist","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-get-secrets-","dir":"Reference","previous_headings":"","what":"Method get.secrets()","title":"Profile — Profile","text":"Method collect secrets associated given username database","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$get.secrets(username = NA, database = SAILR.DEF$DATABASE)"},{"path":"/reference/SAIL-Profile.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"username (character|NA) username relates secrets database (character|NA) name database secrets relate ; defaults SAILR.DEF$DATABASE name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"secrets associated username & database key exists","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-is-secret-","dir":"Reference","previous_headings":"","what":"Method is.secret()","title":"Profile — Profile","text":"Compare known secret value stored keychain","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$is.secret(username = NA, password = NA, database = SAILR.DEF$DATABASE)"},{"path":"/reference/SAIL-Profile.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"username (character|NA) Optional username relates secrets password (character|NA) secret like compare stored keychain database (character|NA) name database secrets relate ; defaults SAILR.DEF$DATABASE name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"logical describing equivalence secrets","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-set-secrets-","dir":"Reference","previous_headings":"","what":"Method set.secrets()","title":"Profile — Profile","text":"Method set secrets given username database","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$set.secrets(   username = NA,   password = NA,   database = SAILR.DEF$DATABASE )"},{"path":"/reference/SAIL-Profile.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"username (character|NA) username relates secrets password (character|NA) secret store keychain database (character|NA) name database secrets relate ; defaults SAILR.DEF$DATABASE name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"logical describing whether action successful","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-remove-secrets-","dir":"Reference","previous_headings":"","what":"Method remove.secrets()","title":"Profile — Profile","text":"Method remove secrets associated either () username database; (b) secrets associated database","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$remove.secrets(username = NA, database = SAILR.DEF$DATABASE)"},{"path":"/reference/SAIL-Profile.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"username (character|NA) optional username relates secrets; none provided secrets associated database removed database (character|NA) name database secrets relate ; defaults SAILR.DEF$DATABASE name given","code":""},{"path":"/reference/SAIL-Profile.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Profile — Profile","text":"logical describing whether successful","code":""},{"path":"/reference/SAIL-Profile.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Profile — Profile","text":"objects class cloneable method.","code":""},{"path":"/reference/SAIL-Profile.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile — Profile","text":"","code":"Profile$clone(deep = FALSE)"},{"path":"/reference/SAIL-Profile.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile — Profile","text":"deep Whether make deep clone.","code":""}]
